import struct

hex_str

# Convert hex string to bytes
byte_data = bytes.fromhex(hex_str)

# Unpack bytes into array of integers
urt = struct.unpack('<' + 'I' * (len(byte_data)//4), byte_data)



hex_str
# Convert hex string to bytes
byte_data = bytes.fromhex(hex_str)

# Unpack bytes into array of integers
lp = struct.unpack('<' + 'I' * (len(byte_data)//4), byte_data)



hex_str = "49B40000E7DD0000C3F4000071EA0000D7C500000BF3000079BE000029DE000059FC000047F00000C1AB00006FDD000053CB000029EC000059F3000093FB000075DC0000A5860000E5CA000071CB0000E98600005FC90000FD8200000FF7000041B1000005C900001F880000C9A7000011C20000238D000053AD00003BCB000067AE0000CDE700001BB0000075FB000003F40000E3AE0000919900000FF200006FEB000067DF0000A1D80000E3BF0000E1C70000EDDD000029A1000087B50000CFAF000077DA000035F8000073F70000A9B700002F87000043CC0000BBE10000C5E3000005D40000"
# Convert hex string to bytes
byte_data = bytes.fromhex(hex_str)

# Unpack bytes into array of integers
lq = struct.unpack('<' + 'I' * (len(byte_data)//4), byte_data)


ex = 0x10001

hex_str = "5624B00E16AB840E5599944AC24FBB5AB2FA0E36851C920CD016D60A85E4BC3F3B96A30A5460D43AA219AF271CE21C6095606415F245013034FC8F540789B104F2761A2232C938072F437401F852950A5B99AB1F73066748DAF73C0A8E009066FD5C061530C8B93B83E5EC24697E4618ADB845037FEF180B96CF6300A343E34F4507F23E55718C12843EB914D7AB441C6489BD143B5DFB1290D2151BA8C1A527D6766A1D99464261579CF03D80503B48845C5B0E4DAF2118DB58181764420E0BA7E91705F2B4CF0066834452C79781229595F8299F292F1276DF8832D33FAC148327A72BD37D8B26000000000000000000000000000000000000000000000000"


# Convert hex string to bytes
byte_data = bytes.fromhex(hex_str)

# Unpack bytes into array of integers
cip = struct.unpack('<' + 'I' * (len(byte_data)//4), byte_data)


def roshan(a1: int, a2: int, a3: int, a4: int) -> int:
    if a4 * a3 < 0:
        print("hayoloh")
    return pow(a1, a2, a4 * a3)


def main():
    v4 = [0] * 64
    Str = "input()"
    kamus = dict()

    for ch in range(256):
        Str = chr(ch) * 58
        Str_mod = list(Str)
        for i in range(len(Str)):
            for j in range(len(Str)):
                v4[j] = Str_mod[urt[j]]
            for k in range(len(Str)):
                Str_mod[k] = v4[k]
        result = 0
        for m in range(len(Str)):
            v7 = ord(Str_mod[m])
            v6 = roshan(v7, ex, lp[m], lq[m])
            kamus[v6] = ch
    print(kamus)

main()