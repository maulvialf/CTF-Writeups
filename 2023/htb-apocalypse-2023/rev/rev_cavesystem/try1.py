from z3 import *
LEN = 8
solp = Solver()

s = [BitVec(i, 128) for i in range(LEN)]
v5 = [BitVec(i, 128) for i in range(LEN)]
v6 = [BitVec(i, 128) for i in range(LEN)]
v7 = [BitVec(i, 128) for i in range(LEN)]
v8 = [BitVec(i, 128) for i in range(LEN)]
v9 = [BitVec(i, 128) for i in range(LEN)]
v10 = [BitVec(i, 128) for i in range(LEN)]
v11 = [BitVec(i, 128) for i in range(LEN)]
v12 = [BitVec(i, 128) for i in range(LEN)]
v13 = [BitVec(i, 128) for i in range(LEN)]
v14 = [BitVec(i, 128) for i in range(LEN)]
v15 = [BitVec(i, 128) for i in range(LEN)]
v16 = [BitVec(i, 128) for i in range(LEN)]
v17 = [BitVec(i, 128) for i in range(LEN)]
v18 = [BitVec(i, 128) for i in range(LEN)]
v19 = [BitVec(i, 128) for i in range(LEN)]
for i in range(LEN):
    solp.add(s[i] < 256)
    solp.add(s[i] >= 0)

for x in range(5, 19+1):
    for i in range(LEN):
        # exec("print(i)")
        exec("solp.add(v{}[i] < 256)".format(x))
        exec("solp.add(v{}[i] >= 0)".format(x))


solp.add((v10[0] * (v6[5]) ) == 20)
solp.add((v8[0] - (v8[4]) ) == 0xFA)
# solp.add(((v8[5]) - (v7[2]) ) == 0xD6)
# solp.add((v6[0] - v10[0] ) == 8)
# solp.add(((v10[7]) - v5[0] ) % 256 == 0xD5)
# solp.add((s[7] * (v7[2]) ) % 256 == 0xED)
# solp.add((v7[0] * s[4] ) % 256 == 0xC8)
# solp.add((((v7[4]) ^ (v8[2])) ) % 256 == 85)
# solp.add(((v7[6]) - (v10[7]) ) % 256 == 52)
# solp.add(((v10[2]) + (v11[3]) ) % 256 == 0x8F)
# solp.add(((v7[3]) + (v9[4]) ) % 256 == 0xD6)
# solp.add((((v5[6]) ^ (v6[1])) ) % 256 == 49)
# solp.add(((v6[4]) * v11[0] ) % 256 == 0xAC)
# solp.add(((v11[2]) - (v7[2]) ) % 256 == 0xC2)
# solp.add(((s[6] ^ (v7[2])) ) % 256 == 47)
# solp.add((((v8[7]) ^ (v5[6])) ) % 256 == 90)
# solp.add((((v8[7]) ^ (v9[4])) ) % 256 == 64)
# solp.add((v9[0] ) % 256 == (v7[2]))
# solp.add(((v10[1]) + (v6[7]) ) % 256 == 0x98)
# solp.add(((v11[3]) * (v6[7]) ) % 256 == 104)
# solp.add((s[1] - (v7[4]) ) % 256 == 0xDB)
# solp.add((v7[0] - (v7[5]) ) % 256 == 0xD2)
# solp.add(((v8[6]) - v7[0] ) % 256 == 46)
# solp.add((((v6[6]) ^ v8[0]) ) % 256 == 26)
# solp.add((s[4] * (v9[4]) ) % 256 == 0xA0)
# solp.add(((v7[3]) * (v8[6]) ) % 256 == 94)
# solp.add(((v5[7]) - v9[0] ) % 256 == 0xC8)
# solp.add((((v10[5]) ^ (v10[1])) ) % 256 == 86)
# solp.add((((v9[5]) ^ (v7[2])) ) % 256 == 43)
# solp.add((((v5[1]) ^ (v10[6])) ) % 256 == 25)
# solp.add(((v7[4]) - (v9[7]) ) % 256 == 26)
# solp.add(((v6[3]) + (v10[2]) ) % 256 == 0xA1)
# solp.add(((v11[1]) + (v8[5]) ) % 256 == 86)
# solp.add((((v6[2]) ^ (v7[5])) ) % 256 == 56)
# solp.add((((v11[4]) ^ (v9[4])) ) % 256 == 9)
# solp.add(((v8[6]) * (v5[7]) ) % 256 == 121)
# solp.add((((v7[6]) ^ (v8[5])) ) % 256 == 93)
# solp.add((v8[0] * s[2] ) % 256 == 92)
# solp.add(((v6[2]) * (v5[2]) ) % 256 == 57)
# solp.add(((v7[5]) ) % 256 == (v6[5]))
# solp.add(((v6[5]) * (v8[3]) ) % 256 == 47)
# solp.add(((v8[5]) * v5[0] ) % 256 == 0xAB)
# solp.add(((v7[2]) + (v8[7]) ) % 256 == 0x93)
# solp.add((((v8[2]) ^ (v7[2])) ) % 256 == 115)
# solp.add((((v7[7]) ^ (v6[4])) ) % 256 == 64)
# solp.add((v6[0] + (v7[1]) ) % 256 == 0xA9)
# solp.add((((v11[3]) ^ (v8[7])) ) % 256 == 21)
# solp.add(((v11[3]) + s[0] ) % 256 == 105)
# solp.add(((v9[6]) + (v8[2]) ) % 256 == 0xA5)
# solp.add((((v10[4]) ^ (v7[6])) ) % 256 == 55)
# solp.add(((v7[4]) * s[0] ) % 256 == 8)
# solp.add(((v8[2]) - v11[0] ) % 256 == 0xC5)
# solp.add(((v11[4]) + (v6[2]) ) % 256 == 0xE4)
# # solp.add(((v9[0] ^ (v8[3])) ) % 256 == 110)
# solp.add((v6[0] * v11[0] ) % 256 == 0xAC)
# solp.add(((v10[6]) - (v9[7]) ) % 256 == 13)
# solp.add(((v10[7]) + (v7[6]) ) % 256 == 0x9C)
# solp.add(((v8[1]) + s[6] ) % 256 == 0xD4)
# solp.add(((v7[5]) * s[7] ) % 256 == 0xED)
# # solp.add((((v7[5]) ^ v11[0]) ) % 256 == 56)
# solp.add(((v8[5]) * s[1] ) % 256 == 100)
# # solp.add((((v11[2]) ^ v11[0]) ) % 256 == 70)
# solp.add(((v6[3]) * s[2] ) % 256 == 38)
# solp.add((((v6[6]) ^ (v7[2])) ) % 256 == 43)
# solp.add((s[7] + s[1] ) % 256 == 0x87)
# solp.add(((s[0] ^ (v7[3])) ) % 256 == 42)
# solp.add(((v6[5]) - s[1] ) % 256 == 11)
# solp.add(((v10[6]) + (v7[3]) ) % 256 == 0xCE)
# solp.add((((v5[5]) ^ (v6[1])) ) % 256 == 59)
# solp.add(((v6[3]) - (v11[2]) ) % 256 == 18)
# solp.add(((v6[1]) ) % 256 == (v5[2]))
# solp.add(((v5[6]) - (v11[2]) ) % 256 == 77)
# solp.add(((v10[4]) * (v9[2]) ) % 256 == 78)
# solp.add(((v10[2]) ) % 256 == v8[0])
# solp.add((((v10[3]) ^ (v9[7])) ) % 256 == 56)
# solp.add(((v7[1]) + (v8[6]) ) % 256 == 0x94)
# solp.add(((v10[4]) + (v9[1]) ) % 256 == 0xCF)
# solp.add(((v9[4]) ) % 256 == (v6[4]))
# solp.add(((v7[1]) + (v5[4]) ) % 256 == 102)
# solp.add(((v8[4]) + (v11[4]) ) % 256 == 0xF1)
# solp.add(((v9[1]) - (v6[5]) ) % 256 == 17)
# solp.add(((v8[4]) - (v10[1]) ) % 256 == 68)
# solp.add(((v5[1]) - (v8[3]) ) % 256 == 68)
# solp.add((((v10[3]) ^ (v10[5])) ) % 256 == 1)
# solp.add((((v11[1]) ^ (v8[2])) ) % 256 == 13)
# solp.add(((v5[3]) - (v7[4]) ) % 256 == 0xEB)
# solp.add((v7[0] + (v6[7]) ) % 256 == 0x99)
# solp.add(((v5[5]) + v7[0] ) % 256 == 0x95)
# solp.add(((v5[4]) - s[0] ) % 256 == 0xE9)
# solp.add(((v7[7]) + (v8[2]) ) % 256 == 96)
# solp.add(((v10[5]) + s[5] ) % 256 == 0x96)
# solp.add(((v9[2]) * (v10[1]) ) % 256 == 96)
# solp.add(((v6[5]) * v10[0] ) % 256 == 20)
# solp.add(((v7[3]) - (v10[4]) ) % 256 == 3)
# solp.add(((v6[4]) + (v11[1]) ) % 256 == 0x95)
# solp.add(((v10[5]) * (v5[2]) ) % 256 == 0xDA)
# solp.add(((v9[1]) + s[1] ) % 256 == 0xC4)
# solp.add(((v9[7]) - s[1] ) % 256 == 11)
# solp.add(((v9[3]) ) % 256 == (v6[3]))
# solp.add(((v9[7]) + (v8[7]) ) % 256 == 0x93)
# solp.add(((v11[2]) * (v5[4]) ) % 256 == 81)
# solp.add(((v7[2]) * v5[0] ) % 256 == 65)
# solp.add(((v9[6]) - (v7[7]) ) % 256 == 69)
# solp.add(((v8[5]) + s[7] ) % 256 == 104)
# solp.add((s[4] + (v8[4]) ) % 256 == 0xBC)
# solp.add((v8[0] + (v7[7]) ) % 256 == 0xA2)
# solp.add((s[5] + (v7[1]) ) % 256 == 101)
# solp.add(((v7[5]) * (v9[3]) ) % 256 == 0xED)
# solp.add((((v9[5]) ^ (v5[5])) ) % 256 == 16)
# solp.add((v10[0] - (v5[4]) ) % 256 == 59)
# solp.add(((v6[7]) - v5[0] ) % 256 == 9)
# solp.add((((v9[2]) ^ s[7]) ) % 256 == 65)
# solp.add((s[5] - (v9[3]) ) % 256 == 0xFD)
# solp.add((((v6[2]) ^ (v11[4])) ) % 256 == 26)
# solp.add(((s[3] ^ s[1]) ) % 256 == 47)
# solp.add(((v6[1]) - (v8[7]) ) % 256 == 43)
# solp.add(((v6[4]) + v5[0] ) % 256 == 0xD3)
# solp.add(((v10[5]) * (v5[3]) ) % 256 == 0xD8)
# solp.add((s[6] + (v7[3]) ) % 256 == 0xD2)
# solp.add((s[3] + s[5] ) % 256 == 0xAB)
# solp.add(((v8[3]) - (v9[7]) ) % 256 == 0xD2)





www = solp.check()    
model = solp.model()
print (model)
LEN = 8 * 15
manga = [0 for i in range(LEN )]
y = 0

y += 1
for i in range(8):
    index = eval(str(model[i])[2:])
    manga[index] = eval(str(model[model[i]]))
# print "".join([chr(eval(str(model[model[i]]))) for i in range(13)])


b = "".join([chr(manga[i]) for i in range(LEN)])
print(b)


"""
(    v10[0] * (v6[5]) ) % 256 == 20
    && v8[0] - (v8[4]) ) % 256 == 0xFA
    && (v8[5]) - (v7[2]) ) % 256 == 0xD6
    && v6[0] - v10[0] ) % 256 == 8
    && (v10[7]) - v5[0] ) % 256 == 0xD5
    && s[7] * (v7[2]) ) % 256 == 0xED
    && v7[0] * s[4] ) % 256 == 0xC8
    && ((v7[4]) ^ (v8[2])) ) % 256 == 85
    && (v7[6]) - (v10[7]) ) % 256 == 52
    && (v10[2]) + (v11[3]) ) % 256 == 0x8F
    && (v7[3]) + (v9[4]) ) % 256 == 0xD6
    && ((v5[6]) ^ (v6[1])) ) % 256 == 49
    && (v6[4]) * v11[0] ) % 256 == 0xAC
    && (v11[2]) - (v7[2]) ) % 256 == 0xC2
    && (s[6] ^ (v7[2])) ) % 256 == 47
    && ((v8[7]) ^ (v5[6])) ) % 256 == 90
    && ((v8[7]) ^ (v9[4])) ) % 256 == 64
    && v9[0] ) % 256 == (v7[2])
    && (v10[1]) + (v6[7]) ) % 256 == 0x98
    && (v11[3]) * (v6[7]) ) % 256 == 104
    && s[1] - (v7[4]) ) % 256 == 0xDB
    && v7[0] - (v7[5]) ) % 256 == 0xD2
    && (v8[6]) - v7[0] ) % 256 == 46
    && ((v6[6]) ^ v8[0]) ) % 256 == 26
    && s[4] * (v9[4]) ) % 256 == 0xA0
    && (v7[3]) * (v8[6]) ) % 256 == 94
    && (v5[7]) - v9[0] ) % 256 == 0xC8
    && ((v10[5]) ^ (v10[1])) ) % 256 == 86
    && ((v9[5]) ^ (v7[2])) ) % 256 == 43
    && ((v5[1]) ^ (v10[6])) ) % 256 == 25
    && (v7[4]) - (v9[7]) ) % 256 == 26
    && (v6[3]) + (v10[2]) ) % 256 == 0xA1
    && (v11[1]) + (v8[5]) ) % 256 == 86
    && ((v6[2]) ^ (v7[5])) ) % 256 == 56
    && ((v11[4]) ^ (v9[4])) ) % 256 == 9
    && (v8[6]) * (v5[7]) == 121
    && ((v7[6]) ^ (v8[5])) == 93
    && v8[0] * s[2] == 92
    && (v6[2]) * (v5[2]) == 57
    && (v7[5]) == (v6[5])
    && (v6[5]) * (v8[3]) == 47
    && (v8[5]) * v5[0] == 0xAB
    && (v7[2]) + (v8[7]) == 0x93
    && ((v8[2]) ^ (v7[2])) == 115
    && ((v7[7]) ^ (v6[4])) == 64
    && v6[0] + (v7[1]) == 0xA9
    && ((v11[3]) ^ (v8[7])) == 21
    && (v11[3]) + s[0] == 105
    && (v9[6]) + (v8[2]) == 0xA5
    && ((v10[4]) ^ (v7[6])) == 55
    && (v7[4]) * s[0] == 8
    && (v8[2]) - v11[0] == 0xC5
    && (v11[4]) + (v6[2]) == 0xE4
    && (v9[0] ^ (v8[3])) == 110
    && v6[0] * v11[0] == 0xAC
    && (v10[6]) - (v9[7]) == 13
    && (v10[7]) + (v7[6]) == 0x9C
    && (v8[1]) + s[6] == 0xD4
    && (v7[5]) * s[7] == 0xED
    && ((v7[5]) ^ v11[0]) == 56
    && (v8[5]) * s[1] == 100
    && ((v11[2]) ^ v11[0]) == 70
    && (v6[3]) * s[2] == 38
    && ((v6[6]) ^ (v7[2])) == 43
    && s[7] + s[1] == 0x87
    && (s[0] ^ (v7[3])) == 42
    && (v6[5]) - s[1] == 11
    && (v10[6]) + (v7[3]) == 0xCE
    && ((v5[5]) ^ (v6[1])) == 59
    && (v6[3]) - (v11[2]) == 18
    && (v6[1]) == (v5[2])
    && (v5[6]) - (v11[2]) == 77
    && (v10[4]) * (v9[2]) == 78
    && (v10[2]) == v8[0]
    && ((v10[3]) ^ (v9[7])) == 56
    && (v7[1]) + (v8[6]) == 0x94
    && (v10[4]) + (v9[1]) == 0xCF
    && (v9[4]) == (v6[4])
    && (v7[1]) + (v5[4]) == 102
    && (v8[4]) + (v11[4]) == 0xF1
    && (v9[1]) - (v6[5]) == 17
    && (v8[4]) - (v10[1]) == 68
    && (v5[1]) - (v8[3]) == 68
    && ((v10[3]) ^ (v10[5])) == 1
    && ((v11[1]) ^ (v8[2])) == 13
    && (v5[3]) - (v7[4]) == 0xEB
    && v7[0] + (v6[7]) == 0x99
    && (v5[5]) + v7[0] == 0x95
    && (v5[4]) - s[0] == 0xE9
    && (v7[7]) + (v8[2]) == 96
    && (v10[5]) + s[5] == 0x96
    && (v9[2]) * (v10[1]) == 96
    && (v6[5]) * v10[0] == 20
    && (v7[3]) - (v10[4]) == 3
    && (v6[4]) + (v11[1]) == 0x95
    && (v10[5]) * (v5[2]) == 0xDA
    && (v9[1]) + s[1] == 0xC4
    && (v9[7]) - s[1] == 11
    && (v9[3]) == (v6[3])
    && (v9[7]) + (v8[7]) == 0x93
    && (v11[2]) * (v5[4]) == 81
    && (v7[2]) * v5[0] == 65
    && (v9[6]) - (v7[7]) == 69
    && (v8[5]) + s[7] == 104
    && s[4] + (v8[4]) == 0xBC
    && v8[0] + (v7[7]) == 0xA2
    && s[5] + (v7[1]) == 101
    && (v7[5]) * (v9[3]) == 0xED
    && ((v9[5]) ^ (v5[5])) == 16
    && v10[0] - (v5[4]) == 59
    && (v6[7]) - v5[0] == 9
    && ((v9[2]) ^ s[7]) == 65
    && s[5] - (v9[3]) == 0xFD
    && ((v6[2]) ^ (v11[4])) == 26
    && (s[3] ^ s[1]) == 47
    && (v6[1]) - (v8[7]) == 43
    && (v6[4]) + v5[0] == 0xD3
    && (v10[5]) * (v5[3]) == 0xD8
    && s[6] + (v7[3]) == 0xD2
    && s[3] + s[5] == 0xAB
    && (v8[3]) - (v9[7]) == 0xD2
"""